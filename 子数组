package zishuzu;
 
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
 
public class Sum {
    public static boolean isInt(String val) {
        try {
        Integer.parseInt(val);
        return true;
        } catch (NumberFormatException e) {
        return false;
        }
        }
    public static void main(String[] args) throws IOException {
        try {
 
            FileWriter fw = new FileWriter("Test.txt");
            BufferedWriter bw = new BufferedWriter(fw);
            for (int i = 0; i < 100; i++) {
                java.util.Random rnd = new java.util.Random();
                int n = rnd.nextInt(2000)-1000;
                String s = n + "";           
                bw.write(s);
                bw.newLine();
            }
            bw.close();
            fw.close();
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
 
        ArrayList<String> arrList = new ArrayList<>();
        try {
            FileReader fr = new FileReader("Test.txt");
            BufferedReader bf = new BufferedReader(fr);
            String st;
            while ((st = bf.readLine()) != null) {
                arrList.add(st);
            }
            bf.close();
            fr.close();
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //长度
        int len = arrList.size();
         BigInteger a[] = new BigInteger[len];
         BigInteger b[] = new BigInteger[20000000];
        for (int i = 0; i < len; i++) {
            //数组转移
            String s=arrList.get(i);
            a[i]=new BigInteger(String.valueOf(s));       
        }
        System.out.println(large(a, len)); // 打印最大子数组
    }
    private static BigInteger large(BigInteger[] a, int len) {
        // TODO Auto-generated method stub
        BigInteger max = a[0];
        BigInteger max2 =new BigInteger("0");
        for (int i = 0; i < len; i++) {
            max2 = max2.add(a[i]).max(a[0]); // 几个连续最大的值
            max = max.max (max2); // 目前为止最大值
        }
        return max;
    }
    private static int max(int a, int b) {
        if (a > b)
            return a;
        else
            return b;
    }
}
